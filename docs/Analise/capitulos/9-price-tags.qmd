```{r, header-price-tags-1, echo=FALSE, message=FALSE}
########################################################################################## #
#'  Parte do arquivo de análise exploratória
#'  Analisando preços e tags
#' 
#'  Autor: Mikael Marin Coletto
#'  Data: 11/03/23
########################################################################################## #

## 0.1 - Bibliotecas e scripts fontes----
library(ggplot2)
library(dplyr)
# library(janitor)
source(here::here("R/fct-auxiliares/fct_filter_not_games.R"))
switch_overwrite_initial_tables <- F
```

## Categorias e performance em reviews

```{r, tag-price-group, echo=F}
  if(switch_overwrite_initial_tables){
  df_all_games <- data.table::fread(here::here("data-raw/created-tables/db-all-games-tags-all.csv"))
  
  ## Recategorizando variável de preços
  df_all_games <- func_add_price_categ(df_all_games, F)
  
  df_price_count <- df_all_games |> 
    dplyr::select(app_id, price_categ) |> 
    dplyr::distinct(app_id, .keep_all = T) |> 
    dplyr::group_by(price_categ) |> 
    dplyr::summarise(count = dplyr::n()) |> 
    dplyr::mutate(total = sum(count),
                  percentage = round(100*count/total, 2)) |> 
    dplyr::select(-total)
  
  ## Criando tabela de agrupamento (contagem)
  df_price_categ_split <- data.table::fread(here::here("data-raw/created-tables/db-all-games-tags-all-split.csv")) 
  
  df_price_categ <- func_add_price_categ(df_price_categ_split, F) |> 
    dplyr::group_by(tags_all, price_categ) |>
    dplyr::summarise(count = n()) |> 
    dplyr::ungroup()
  
  ## Escrevendo tabelas
  data.table::fwrite(df_all_games, here::here("data-raw/created-tables/db-all-games-tags-all-price-categ.csv"))
  data.table::fwrite(df_price_categ, here::here("data-raw/created-tables/df-price-categ.csv"))
  data.table::fwrite(df_price_count, here::here("data-raw/created-tables/df-price-count.csv"))
  
}else{
  ## Tabela completa com todos os jogos
  df_all_games <- data.table::fread(here::here("data-raw/created-tables/db-all-games-tags-all-price-categ.csv"))
## Tabela com contagem de categorias e faixa de preço
  df_price_categ <- data.table::fread(here::here("data-raw/created-tables/df-price-categ.csv"))
## Tabela com contagem e porcentagem de cada faixa de preço na base de dados
  df_price_count <- data.table::fread(here::here("data-raw/created-tables/df-price-count.csv"))
## Tabela com jogos e base em com tags separadas por linha
  df_price_categ_split <- data.table::fread(here::here("data-raw/created-tables/db-all-games-tags-all-split.csv")) 
}

total_jogos <- sum(df_price_count$count)

df_categs <- df_price_categ |> 
  dplyr::group_by(tags_all) |> 
  dplyr::summarise(games = sum(count)) |> 
  dplyr::ungroup()

```

Vou fazer um agrupamento entre as categorias (na base, definida como "tags") dos jogos e uma recategorização para a variável de preços, visando facilitar a comparação entre os jogos. Essa recategorização irá replicar cada jogo separando as categorias, portanto teremos ao final um número de linhas muito maior que o número de jogos da nossa base inicial, porque cada jogo pode possuir um número de 1 à `r (max(stringr::str_count(df_all_games$tags_all, ","))+1)` categorias.

O número de **categorias distintas** na base de dados é de **`r length(unique(df_price_categ$tags_all))`**, e para cada categoria, a **média** de vezes em que ela aparece nos jogos é de **`r round(mean(df_categs$games),0)`** e a mediana é de **`r median(df_categs$games)`**, e pela diferença entre média e mediana percebemos que a **distribuição** dos jogos por categoria é bastante **irregular**, analisaremos então esta diferença de outra forma.

```{r, graph-dist-categs, echo=FALSE}
ggplot(df_categs, aes(x = games, fill = after_stat(count))) +
  geom_histogram(bins = 20) +
  scale_fill_gradient(low = "lightblue", high = "blue") +
  theme_minimal() +
  labs(title = "Distribuição das categorias nos jogos",
       subtitle = "Quantas vezes cada categoria apareceu nos jogos",
       alt = "Histograma de distribuição da contagem de categorias nos jogos",
       x = "Distribuição",
       y = "Contagem",
       fill = "")
```

Utilizando o histograma vemos quantas vezes cada categoria apareceu, e temos uma grande parte distribuída entre as primeiras barras, porém podemos observar algumas barras muito menores que aparecem mais vezes, ou seja, categorias que aparecem em muitos jogos. Algumas dessas mais frequentes inclusive estão presentes em mais de metade dos **`r total_jogos` jogos**.

## Análise por faixa de preço

A nossa análise será feita nas faixas de preço definidas, os jogos foram separados em gratuitos (preço = 0), jogos muito baratos (preço entre \$0.01 e \$10.00), jogos baratos (preço entre \$10.01 e \$20.00), jogos médios (preço entre \$20.01 e \$40.00), jogos caros (preço entre \$40.01 e \$60.00) e jogos muito caros (preço de $60.01 ou mais).

### Avaliando os jogos muito caros (Muito Caro)

```{r, tag-price-verExp-mean-median, echo = FALSE}
## Verificando média e mediana por categoria "Muito Caro"
mean_verExp <- round(mean(df_price_categ$count[df_price_categ$price_categ == "Muito Caro"]), 2)
median_verExp <- round(median(df_price_categ$count[df_price_categ$price_categ == "Muito Caro"]), 2)
sd_verExp <- round(sd(df_price_categ$count[df_price_categ$price_categ == "Muito Caro"]), 2)
```

Definimos essa faixa de preço dos muito caros como jogos acima de 60 dólares, e podemos ver pelos valores de média (`r mean_verExp`) e mediana (`r median_verExp`) são próximos, aliados ao desvio padão que também não é alto (`r sd_verExp`), ou seja, temos pouca variação do número de jogos por categoria nessa faixa de preço.

```{r, tag-price-verExp, echo = FALSE}

# df_all_games_verExp <- df_all_games |> 
#   dplyr::filter(price_categ == "Muito Caro",
#                 stringr::str_detect(tags_all, "Indie"))

## Separando as 20 categorias que mais aparecem
df_price_categ_verExp <- df_price_categ |> 
  dplyr::filter(price_categ == "Muito Caro") |> 
  dplyr::arrange(desc(count)) |> 
  dplyr::slice_head(n = 20)

df_price_categ_verExp |> 
  gt::gt()
```

Vemos também que a maioria das categorias possui poucas amostras, ou seja, na nossa base de dados e em geral na Steam, poucos jogos são lançados acima dos $60 independente da categoria.

Em comparação com a população de jogos, a amostra para essa categoria é pequena comparada ao tamanho da nossa base de dados, do total de **`r total_jogos`** apenas **`r round(100*sum(df_price_count[df_price_count$price_categ == "Muito Caro",]$count)/sum(df_price_count$count),2)`%** ou `r df_price_count[df_price_count$price_categ == "Muito Caro"]$count` jogos (compondo um total de `r sum(df_price_categ[df_price_categ$price_categ == "Muito Caro",]$count)` tags) estão nesta faixa de valores.

### Avaliando os jogos caros (Caro)

```{r, tag-price-exp-mean-median, echo = FALSE}
## Verificando média e mediana por categoria "Caro"
mean_exp <- round(mean(df_price_categ$count[df_price_categ$price_categ == "Caro"]), 2)
median_exp <- round(median(df_price_categ$count[df_price_categ$price_categ == "Caro"]), 2)
sd_exp <- round(sd(df_price_categ$count[df_price_categ$price_categ == "Caro"]), 2)
```

Já nos jogos caros, entre 40 e 60 dólares, vemos valores de média (`r mean_exp`) e mediana (`r median_exp`), agora com uma diferença maior, indicando uma distribuição não-normal. O desvio padrão aumentou (`r sd_exp`), junto com a diferença entre média e mediana indica uma variação maior entre categorias.

```{r, tag-price-exp}
## Separando as 20 categorias que mais aparecem
df_price_categ_exp <- df_price_categ |> 
  dplyr::filter(price_categ == "Caro") |> 
  dplyr::arrange(desc(count)) |> 
  dplyr::slice_head(n = 20)

df_price_categ_exp |> 
  gt::gt()
```

O número de contagem por categoria já é consideravelmente maior, ou seja temos uma quantidade de jogos maior nessa faixa de preços.

Os números de comparando com a população de jogos já é superior, com **`r round(100*sum(df_price_count[df_price_count$price_categ == "Caro",]$count)/sum(df_price_count$count),2)`%** dos jogos, ou `r df_price_count[df_price_count$price_categ == "Caro"]$count` jogos (compondo um total de `r sum(df_price_categ[df_price_categ$price_categ == "Caro",]$count)` tags) estão nesse segmento.


### Avaliando os jogos medianos (Medio)

```{r, tag-price-med-mean-median, echo = FALSE}
## Verificando média e mediana por categoria "Medio"
mean_med <- round(mean(df_price_categ$count[df_price_categ$price_categ == "Medio"]), 2)
median_med <- round(median(df_price_categ$count[df_price_categ$price_categ == "Medio"]), 2)
sd_med <- round(sd(df_price_categ$count[df_price_categ$price_categ == "Medio"]), 2)
```

Os jogos de preço médio, entre 20 e 40 dólares, vemos valores de média (`r mean_med`), mediana (`r median_med`) e desvio padrão (`r sd_med`) novamente com acréscimo de variação.

```{r, tag-price-med}
## Separando as 20 categorias que mais aparecem
df_price_categ_med <- df_price_categ |> 
  dplyr::filter(price_categ == "Medio") |> 
  dplyr::arrange(desc(count)) |> 
  dplyr::slice_head(n = 20)

df_price_categ_med |> 
  gt::gt()
```

Os números de continua crescendo na faixa de preço continua crescendo, com **`r round(100*sum(df_price_count[df_price_count$price_categ == "Medio",]$count)/sum(df_price_count$count),2)`%** dos jogos, ou `r df_price_count[df_price_count$price_categ == "Medio"]$count` jogos (compondo um total de `r sum(df_price_categ[df_price_categ$price_categ == "Medio",]$count)` tags) estão nesse segmento, um aumento de 10% na quantidade de jogos comparados à faixa de preço anterior.

### Avaliando os jogos "baratos" (Barato)

```{r, tag-price-low-mean-median, echo = FALSE}
## Verificando média e mediana por categoria "Barato"
mean_low <- round(mean(df_price_categ$count[df_price_categ$price_categ == "Barato"]), 2)
median_low <- round(median(df_price_categ$count[df_price_categ$price_categ == "Barato"]), 2)
sd_low <- round(sd(df_price_categ$count[df_price_categ$price_categ == "Barato"]), 2)
```

Nos jogos de preço baixo, entre 10 e 20 dólares, a variação continua a aumentar temos de média `r mean_low`, mediana `r median_low` e desvio padrão `r sd_low`. O que pode ser explicado pelo aumento do número de jogos e concentração de jogos em algumas categorias.

```{r, tag-price-low}
## Separando as 20 categorias que mais aparecem
df_price_categ_low <- df_price_categ |> 
  dplyr::filter(price_categ == "Barato") |> 
  dplyr::arrange(desc(count)) |> 
  dplyr::slice_head(n = 20)

df_price_categ_low |> 
  gt::gt()
```

Os números de continua crescendo na faixa de preço continua crescendo, com **`r round(100*sum(df_price_count[df_price_count$price_categ == "Barato",]$count)/sum(df_price_count$count),2)`%** dos jogos, ou `r df_price_count[df_price_count$price_categ == "Barato"]$count` jogos (compondo um total de `r sum(df_price_categ[df_price_categ$price_categ == "Barato",]$count)` tags) estão nesse segmento, ou seja, temos praticamente um terço dos jogos disponíveis na steam.

### Avaliando os jogos "muito baratos" (Muito Barato)

```{r, tag-price-verLow-mean-median, echo = FALSE}
## Verificando média e mediana por categoria "Muito Barato"
mean_verLow <- round(mean(df_price_categ$count[df_price_categ$price_categ == "Muito Barato"]), 2)
median_verLow <- round(median(df_price_categ$count[df_price_categ$price_categ == "Muito Barato"]), 2)
sd_verLow <- round(sd(df_price_categ$count[df_price_categ$price_categ == "Muito Barato"]), 2)
```

Para os jogos de preço, de preços até 10 dólares, classificados como "Muito Baratos" temos variações ainda crescentes mas mais próximos da categoria anterior, a média é de`r mean_verLow`, mediana `r median_verLow` e o desvio padrão `r sd_verLow`.

```{r, tag-price-verLow}
## Separando as 20 categorias que mais aparecem
df_price_categ_verLow <- df_price_categ |> 
  dplyr::filter(price_categ == "Muito Barato") |> 
  dplyr::arrange(desc(count)) |> 
  dplyr::slice_head(n = 20)

df_price_categ_verLow |> 
  gt::gt()
```

Os números na faixa de preço crescem um pouco mais, com **`r round(100*sum(df_price_count[df_price_count$price_categ == "Muito Barato",]$count)/sum(df_price_count$count),2)`%** dos jogos, ou `r df_price_count[df_price_count$price_categ == "Muito Barato"]$count` jogos (compondo um total de `r sum(df_price_categ[df_price_categ$price_categ == "Muito Barato",]$count)` tags) estão nesse segmento, ou seja, temos praticamente quase metade dos jogos aqui nesta categoria. Se pensarmos nas duas categorias de jogos mais baratas, temos quase 80% dos jogos da base de dados, sem dúvida onde os jogos estão mais concentrados.

### Avaliando os jogos gratuitos (Free)

```{r, tag-price-free-mean-median, echo = FALSE}
## Verificando média e mediana por categoria "Free"
mean_free <- round(mean(df_price_categ$count[df_price_categ$price_categ == "Free"]), 2)
median_free <- round(median(df_price_categ$count[df_price_categ$price_categ == "Free"]), 2)
sd_free <- round(sd(df_price_categ$count[df_price_categ$price_categ == "Free"]), 2)
```

Na última categoria de preços, os jogos gratuitos, as variações diminuem. A média é de`r mean_free`, mediana `r median_free` e o desvio padrão `r sd_free`.

```{r, tag-price-free}
## Separando as 20 categorias que mais aparecem
df_price_categ_free <- df_price_categ |> 
  dplyr::filter(price_categ == "Free") |> 
  dplyr::arrange(desc(count)) |> 
  dplyr::slice_head(n = 20)

df_price_categ_free |> 
gt::gt()
```

Agora temos uma diminução condiserável do número de jogos, podendo ser causada tanto pelas filtragens, sendo uma delas a quantidade de avaliações e usuários por jogo, quanto a própria baixa popularidade desta categoria de preço, com **`r round(100*sum(df_price_count[df_price_count$price_categ == "Free",]$count)/sum(df_price_count$count),2)`%** dos jogos, ou `r df_price_count[df_price_count$price_categ == "Free"]$count` jogos (compondo um total de `r sum(df_price_categ[df_price_categ$price_categ == "Free",]$count)` tags) nesse segmento, ou seja, essa categoria tem números mais próximos da categoria "Caro" do que das de jogos médios e baratos.

## Resumo das faixas de preço

Um ponto interessante e que foi observado após a 

Como observamos, boa parte dos jogos da Steam, cerca de 80%, que se encaixaram nos nossos filtros de avaliações positivas e números de usuários, estão nas faixas de preço até \$20 (de \$0-10 como "Muito Baratos" e de \$10-20 como "Baratos"), são jogos que exibem uma grande diversidade de categorias e classificações. É um comportamento interessante, porque por serem jogos baratos, contam com o preço como forma de atrair usuários, e podem pensar em estratégias diferentes de acertar um público alvo. 

### Visualizando top categorias por faixa de preço

```{r, r-cbind-categoria-preco}

## Visualizar no formato de tabelas
df_price_categ_all <- cbind(df_price_categ_verExp, df_price_categ_exp, df_price_categ_med, df_price_categ_low, df_price_categ_verLow, df_price_categ_free) |> 
  dplyr::rename(tags_verExp = 1, price_verExp = 2, count_verExp = 3,
                tags_exp = 4, price_exp = 5, count_exp = 6,
                tags_med = 7, price_med = 8, count_med = 9,
                tags_low = 10, price_low = 11, count_low = 12,
                tags_verLow = 13, price_verLow = 14, count_verLow = 15,
                tags_free = 16, price_free = 17, count_free = 18) |> 
  dplyr::select(-2, -5, -8, -11, -14, -17) |> 
  dplyr::mutate(prop_free = round(count_free/sum(count_free)*100, 2), 
                prop_verLow = round(count_verLow/sum(count_verLow)*100, 2),
                prop_low = round(count_low/sum(count_low)*100, 2), 
                prop_med = round(count_med/sum(count_med)*100, 2), 
                prop_exp = round(count_exp/sum(count_exp)*100, 2), 
                prop_verExp = round(count_verExp/sum(count_verExp)*100, 2)) |> 
  dplyr::select(tags_free, count_free, prop_free,
                tags_verLow, count_verLow,prop_verLow,
                tags_low, count_low, prop_low,
                tags_med, count_med, prop_med,
                tags_exp, count_exp, prop_exp,
                tags_verExp, count_verExp, prop_verExp)


df_tab <- df_price_categ_all

newline <- data.frame(tags_free = "Total", prop_free = sum(df_tab$count_free),
                      tags_verLow = "Total", prop_verLow = sum(df_tab$count_verLow),
                      tags_low = "Total", prop_low = sum(df_tab$count_low),
                      tags_med = "Total", prop_med = sum(df_tab$count_med),
                      tags_exp = "Total", prop_exp = sum(df_tab$count_exp),
                      tags_verExp = "Total", prop_verExp = sum(df_tab$count_verExp))

df_tab <- df_tab |> 
  dplyr::select(-dplyr::starts_with("count")) |>
  dplyr::slice_head(n = 20)

df_tab <- rbind(df_tab, newline)

tabela_categ_all <- df_tab |> 
  DT::datatable()

## Usar na construção do gráfico
df_price_categ_all <- rbind(df_price_categ_verExp |> dplyr::slice_head(n = 10), 
                            df_price_categ_exp |> dplyr::slice_head(n = 10),
                            df_price_categ_med |> dplyr::slice_head(n = 10),
                            df_price_categ_low |> dplyr::slice_head(n = 10),
                            df_price_categ_verLow |> dplyr::slice_head(n = 10),
                            df_price_categ_free |> dplyr::slice_head(n = 10)) |> 
  dplyr::group_by(price_categ) |> 
  dplyr::mutate(prop = round(count/sum(count)*100, 2),
                price_categ = as.factor(price_categ),
                price_categ = forcats::fct_relevel(price_categ, "Free", "Muito Barato", "Barato", "Medio", "Caro", "Muito Caro")) |> 
  dplyr::ungroup()

ggplot(df_price_categ_all, aes(x = price_categ, y = prop, group = tags_all, colour = tags_all)) +
  geom_line() +
  theme_minimal() +
  labs()

### Trabalhar com  Highlight Table ou Spark Lines ou Small Multiples

```

### Trabalhando com uma tabela no formato highlight table

```{r}
library(gt)
library(tidyverse)

df_tab[1:20,] |> 
  mutate(`Free` = prop_free, `Muito Barato` = prop_verLow, `Barato` = prop_low,
         `Medio` = prop_med, `Caro` = prop_exp, `Muito Caro` = prop_verExp) |> 
  gt() |> 
  data_color(
    columns = c(`Free`, `Muito Barato`, `Barato`,
                `Medio`, `Caro`, `Muito Caro`),
    fn = scales::col_numeric(
      palette = c("#DAE9E8", "#2A7DC0"),
      domain = NULL
    ),
    apply_to = "fill"
  ) |> 
cols_merge(
  columns = c(`Free`, tags_free),
  pattern = "{2}") |> 
  cols_merge(
    columns = c(`Muito Barato`, tags_verLow),
    pattern = "{2}") |> 
  cols_merge(
    columns = c(`Barato`, tags_low),
    pattern = "{2}") |> 
  cols_merge(
    columns = c(`Medio`, tags_med),
    pattern = "{2}") |> 
  cols_merge(
    columns = c(`Caro`, tags_exp),
    pattern = "{2}") |> 
  cols_merge(
    columns = c(`Muito Caro`, tags_verExp),
    pattern = "{2}") |> 
cols_move_to_start(c(`Free`, `Muito Barato`, `Barato`,
                       `Medio`, `Caro`, `Muito Caro`)) |> 
  gt::cols_hide(columns = contains(c("tags", "prop")))


```

## Conclusões

Podemos ver algumas categorias de jogos que parecem fazer sucesso. Em geral, existem muito mais jogos singleplayer do que jogos multiplayer, provavelmente por conta do custo e da complexidade de se desenvolver um jogo multiplayer.

### Singleplayer vs Multiplayer

Mesmo assim, muitos dos jogos mais avaliados são multiplayer, dos 20 mais avaliados, apenas dois não são multiplayer (The Witcher 3 e Cyberpunk 2077), são jogos que possuem entre 450 mil e 7 milhões de avaliações. Em geral, são jogos mais conhecidos na indústria e que fazem bastante sucesso, englobando muitos jogos gratuitos com vendas de itens dentro do jogo, como o CS:GO, Dota 2, Apex, Destiny 2 e Warframe e jogos com preços variados, citando Terraria e Among Us como jogos muito baratos, Tom Clancy's Rainbow Six® Siege e ARK como jogos baratos, Rust e The Witcher 3 como jogos médios e Elden Ring e Cyberpunk 2077 como jogos mais novos e caros, sem jogos na categoria muito caros.

Porém, se alterarmos a métrica para os jogos mais bem avaliados, o cenário muda. Ao ordenarmos por taxa de avaliação positiva, os 20 jogos mais bem avaliados com nota máxima (99, os que possuíam notas 100 foram excluídos) são Singleplayer, mas estes jogos possuem um número significativamente menor de avaliações, entre 300 e 11 mil e consequentemente um número menor de vendas, além disso são jogos com preço mais baixos e jogos menos conhecidos, e são, em geral, jogos ou baratos ou muito baratos.

Finalizando, se existe um investimento capaz de suportar o desenvolvimento de jogos multiplayers, a recomendação é que o faça, já que são em geral os jogos com maior número de jogadores e com mais avaliações, a interação entre jogadores, quando bem feita, é algo que costuma prender os jogadores e mantê-los jogando um jogo por longos períodos. Nesse caso é preciso estudar o mercado, buscando jogos similares, e identificar qual modelo de negócio é mais adequado. Em geral, os jogos que tem feito mais sucesso são os jogos gratuitos com formas de benefícios pagas dentro do jogo, seja algum tipo de facilitação dentro do jogo, ou itens cosméticos. A vantagem dos jogos gratuitos é que atingem um grande público, o que é vital para o desenvolvimento de uma comunidade de jogadores, e dentro desta comunidade uma parcela que tem a possibilidade de gastar dentro do jogo poderá o fazer. Lembrando que, em geral, são jogos que vendem cosméticos ou acelerações de desempenho, portanto uma questão muito importante é trabalhar de forma que torne os itens cosméticos e as acelerações de desempenho itens desejáveis. 

Porém, se o orçamento é limitado, jogos com preços baixos e que foquem na experiência Singleplayer se saem melhor, são jogos que podem ter um orçamento menor e estúdos independentes. 
Os jogos Indie, que surgem por estúdios de desenvolvimento de jogos independentes costumam ter um gasto menor com desenvolvimento, frequentemente com equipes reduzidas e tentam trazer algum diferencial, podendo ser a história do jogo, o design ou até mesmo alguma mecânica de jogabilidade. Jogos como o FTL, Minecraft, Super Meat Boy e Torchlight são exemplos de jogos que começaram como indie e fizeram muito sucesso no mercado de jogos. Inclusive o Minecraft e Torchlight são jogos que perduram até hoje, o primeiro tendo sido comprado por uma gigante no mercado de tecnologias, a Microsoft, e o segundo com o crescimento do estúdio e podendo ser considerado já um estúdio de médio porte.

Ainda, caso o estúdio tenha dinheiro, porém não quer se preocupar com tanto suporte à longo prazo de servidores, na questão de hackers ou mesmo tenha foco em modos competivivos, existem jogos Singleplayers que tem se destacado no mercado, como o recente Hogwarts Legacy que teve ótima crítica e tem sido bastante falado, e os jogos The Witcher 3 ou Cyberpunk que estão na lista dos 20 jogos mais bem avaliados, porém, fica a ressalva de que esses jogos não são jogos comuns, The Witcher já é o terceiro jogo da série e foi crescendo em público com o tempo, e Cyberpunk é um jogo da mesma desenvolvedora e conseguiu construir uma campanha de marketing para se tornar um jogo muito aguardado.

### Tags mais populares nos 100 jogs com mais reviews

Uma possível verificação que eu acho interessante de ser feita, são as avaliações das tags dos 100 jogos mais populares, definido pelo número de avaliações positivas no jogo, para verificar dentre esses que tem mais "sucesso", o que se destaca.

```{r, top100-reviews-tags}
top100_id <- df_all_games |> 
  dplyr::arrange(desc(user_reviews)) |> 
  dplyr::slice_head(n = 100) |> 
  dplyr::pull(app_id)

df_top100_tags <- df_price_categ_split |> 
  dplyr::filter(app_id %in% top100_id) |> 
  dplyr::group_by(tags_all) |> 
  dplyr::summarise(count = n(), .groups = NULL) |> 
  dplyr::arrange(desc(count))

## Jogos do top100
df_top100_games <- df_all_games |>
  dplyr::arrange(desc(user_reviews)) |>
  dplyr::slice_head(n = 100)


df_top100_tags |> 
  gt::gt()

```

Primeiramente vale lembrar que cada jogo pode possuir um número ilimitado de categorias, por isso vemos uma contagem tão alta de aparecimento delas.
Também é interessante observar como a categoria Ação passou à frente das demais, estando presente em quase todos os jogos (91%), e como no caso dos jogos do top 100, existem mais jogos que se definem como Multiplayer do que Singleplayer (Respectivamente, 74% e 69%), o que nos mostra que boa parte dos jogos desse top possui ambos os modos, tentando agradar diferentes públicos. Outras categorias que valem a pena serem citadas como bastante presentes são a de Cooperativo e Open World ambos com 54%, categorias não tão fortes na nossa tabela geral, e que ganham mais destaque em jogos mais caros, indicando possivelmente que são jogos mais complexos e mais caros de serem feitos. A categoria FPS aparece bastante também com 41% e Indie também tem seu destaque com 36%.

Testei novamente a base com os top 200 jogos ao invés de 100, e o resultado foi muito próximo, mostrando o que parece ser uma tendência real dos jogos mais populares.

```{r, top100-reviews-tags-positive}

quantile(df_top100_games$positive_ratio, probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1))

ggplot(df_top100_games, aes(x = positive_ratio)) +
  geom_histogram(binwidth = 5) +
  theme_minimal()
```

Avaliando a taxa de avaliações positivas, que vai de 0 a 99 e é calculado com base na relação de opiniões positivas e negativas dos usuários, temos um índice bem alto, na maioria dos jogos. Com praticamente metade desses jogos tendo avaliações acima de 90, e concentração das avaliações entre 70-98. Alguns poucos jogos ficaram abaixo disso, e possivelmente são jogos que podem ser investigados para entender o que motiva essas avaliações tão negativas. O maior exemplo é o Battlefield 2042 com o pior índice de avaliações, Tale of Immortal e PUBG: Battlegrounds.

### Tags em jogos com melhores avaliações

Outra análise interessante é a dos jogos mais bem avaliados, definido pela taxa de avaliações positivas, que pode não ser tão precisa pois acaba tendo jogos com um número de avaliações pequeno em comparação ao tópico anterior, mas pode trazer alguns insights em relação a categorias de jogos que são bem avaliadas.

```{r, top100-positive-tags}
top100_id <- df_all_games |> 
  dplyr::arrange(desc(positive_ratio)) |> 
  dplyr::slice_head(n = 100) |> 
  dplyr::pull(app_id)

df_top100_tags <- df_price_categ_split |> 
  dplyr::filter(app_id %in% top100_id) |> 
  dplyr::group_by(tags_all) |> 
  dplyr::summarise(count = n(), .groups = NULL) |> 
  dplyr::arrange(desc(count))

# ## Jogos do top100
# df_top100_games <- df_all_games |>
#   dplyr::arrange(desc(positive_ratio)) |>
#   dplyr::slice_head(n = 100)


df_top100_tags |> 
  gt::gt()
```

Vemos uma diferença considerável nas categorias, mais em linha com os jogos gratuitos e baratos. A categoria Singleplayer está presente em 67% dos jogos, e a categoria Multiplayer aparece em apenas um jogo, mostrando uma diferença enorme da classificação anterior. Outra categoria que ganha mais destaque é a de jogos indie, com quase o dobro de jogos que a avaliação anterior. As categorias Action, Open World e Co-Op caem drásticamente, com respectivos 32% (contra 91% da anterior), 2% (Contra 54% da anterior) e 2% (Contra 54%). Mostrando que as diferenças nessas duas formas de ranquear os jogos refletem em mudanças bem grandes dos jogos.

```{r, top100-positive-tags-reviews}

quantile(df_top100_games$user_reviews, probs = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1))

ggplot(df_top100_games, aes(x = user_reviews)) +
  geom_histogram(binwidth = 1000) +
  theme_minimal()
```

Outro ponto que acho importante citar, que podemos notar pelo histograma e pelos quartis, é que aproximadamente dos terços da nossa base possui entre 120-1000 avaliações, com apenas alguns poucos jogos que tem mais avaliações, e por conseguinte mais populares.