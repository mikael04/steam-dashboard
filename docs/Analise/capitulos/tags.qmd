```{r, header}
########################################################################################## #
#'  Parte do arquivo de análise exploratória
#'  Arquivo focado em analisar as variáveis de tags da base unida
#' 
#'  Autor: Mikael Marin Coletto
#'  Data: 12/03/23
########################################################################################## #

## 0.1 - Bibliotecas e scripts fontes----
library(purrr)
```

```{r, tags}
## Verificando as diferenças entre tags de um df e do outro (tags e tags_extra)
df_tags <- dplyr::select(df_all_games, 
                         app_id, title, tags, tags_extra)
df_tags_equal <- df_tags[tags == tags_extra,]
df_tags_not_equal <- df_tags[tags != tags_extra,]

# nrow(df_tags[is.na(tags_extra), ])
# nrow(df_tags[is.na(tags), ])

## Primeiro check será em jogos que possuem números de tags diferentes
tags_dif_ids <- df_tags_not_equal |> 
  dplyr::select(app_id, tags, tags_extra) |> 
  dplyr::mutate(check_lenght = ifelse(stringr::str_length(tags) == stringr::str_length(tags_extra), T, F))

```

##### Analisando tags diferentes

```{r, tags-all}
vector_tags <- df_tags_not_equal$tags |> 
  purrr::map(\(x) stringr::str_sort(stringr::str_split_1(x, pattern = ",")))

vector_tags_ex <- df_tags_not_equal$tags_extra |> 
  purrr::map(\(x) stringr::str_sort(stringr::str_split_1(x, pattern = ",")))

vector_tags_aux <- vector_tags[1:5]
vector_tags_ex_aux <- vector_tags_ex[1:5]

## Criando uma lista com todas as tags q estão presentes em uma coluna e não na outra 
## (estão em tags e não estão em tags_extra, estão em tags_extra e não estão em tags)
diff_elem <- NULL
for(i in 1:length(vector_tags)){
  elem_1 <- pluck(vector_tags, i)
  elem_2 <- pluck(vector_tags_ex, i)
  
  diff1 <- setdiff(elem_1, elem_2)
  diff2 <- setdiff(elem_2, elem_1)
  equal <- intersect(elem_1, elem_2)
  
  pluck(diff_elem, i, 1) <- paste0(equal, collapse = ",")
  pluck(diff_elem, i, 2) <- paste0("1 - ", paste0(diff1, collapse = ","), ". 2 - ", paste0(diff2, collapse = ","))
  pluck(diff_elem, i, 3) <- pluck(df_tags_not_equal, 1, i)
}

## Alterando para DF, para melhor visualização
df_diff <- data.frame(t(sapply(diff_elem, c)))
colnames(df_diff) <- c("equal", "diff", "id")

df_diff <- df_diff |> 
  tidyr::separate_wider_delim(diff, ". 2", names = c("first", "seccond")) |> 
  dplyr::mutate(seccond = paste0("2", seccond)) |> 
  dplyr::mutate(equal = as.character(equal),
                id = as.integer(id))
## Palavras com grafias levemente diferentes serão alteradas
## Roguelike e Roguelite para Rogue-like e Rogue-lite,
## Base Building para Base-Building
## e-sports para eSports
## Football (Soccer) para Soccer
## Football (American) para Football
## Puzzle Platformer para Puzzle-Platformer

## Investigando tags com mesmo tamanho, buscando pequenas alterações na escrita
df_diff_ <- df_diff |> 
  dplyr::filter(!(first == "1 - ") & !(seccond == "2 - ")) |> 
  dplyr::filter(stringr::str_length(first) == stringr::str_length(seccond))

## Adicionando tags às tags básicas
df_diff <- df_diff |> 
  dplyr::mutate(all = ifelse(!(first == "1 - "), paste0(equal, ",", gsub("1 - ", "", first)), equal)) |> 
  dplyr::mutate(all = ifelse(!(seccond == "2 - "), paste0(all, ",", gsub("2 - ", "", seccond)), all)) |> 
  dplyr::rowwise() |> 
  dplyr::mutate(all = function_order_strings(all)) |> 
  dplyr::ungroup()

df_diff <- df_diff |> 
  dplyr::select(id, all)
```

##### Visualzando tags mais frequentes

Após a organização e certa limpeza das tags, vou começar com uma visualização simples para identificar as tags mais utilizadas (e as menos utilizadas). Esse processo poderá ser feito no futuro para as outras variáveis de categoria e gênero, de forma similar, já que a estrutura das variáveis é a mesma.

```{r, count-tags}
all_ordered <- df_diff$all |> 
  purrr::map(\(x) stringr::str_sort(stringr::str_split_1(x, pattern = ",")))

## Colocando tudo numa única lista para contagem
all_string_listwise <- tolower(unlist(lapply(all_ordered, unique)))

## Fazendo a contagem e transformando em um dataframe, podemos verifiicar diretamente na tabela
df_tags_count <- as.data.frame(table(all_string_listwise), stringsAsFactors = F)
## Renomeando colunas
names(df_tags_count) <- c("tag", "count")

## Utilllizamos as 20 tags que mais aparecem e criamos uma nova tabela para visualização
df_tags_count |> 
  dplyr::arrange(desc(count)) |> 
  dplyr::slice_head(n = 20) |> 
  DT::datatable()

```