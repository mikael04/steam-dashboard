```{r, header-base-3}
########################################################################################## #
#'  Parte do arquivo de análise exploratória
#'  Arquivo focado na análise da terceira base
#' 
#'  Autor: Mikael Marin Coletto
#'  Data: 13/03/23
########################################################################################## #

## 0.1 - Bibliotecas e scripts fontes----
source(here::here("R/fct-auxiliares/fct_filter_notGames.R"))
```

```{r, db-5}
df_reviews <- data.table::fread(here::here("data-raw/steam-data/db-3/recommendations.csv"))
df_games_3 <- data.table::fread(here::here("data-raw/steam-data/db-3/games.csv"))

df_games_3 <- df_games_3 |> 
  dplyr::filter(positive_ratio < 100 & user_reviews > 20)
```

Após a análise desta nova base de dados, concluí que ela possui sim dados mais atualizados de jogos (com jogos datados de fev/2023), mas possui menos dados relacionados a línguas suportadas (tanto legendas quanto áudios), dados de pico de usuários, dados de DLC, dados de empresas (como sites, e-mail de suporte, imagem do jogo), dados do Metacritic (por mais que não tenham sido úteis) e dados de tempo de jogo. Então utilizarei ela apenas para verificar a avaliação dos usuários (através das colunas `positive_ratio` e `user_reviews`). Serão aplicados filtros análogos, não podemos ter apenas avaliações positivas (`positive_ratio == 100`) e para reviews precisamos ter pelo menos 20 (`user_reviews > 20`).

##### Deduplicação

O mesmo processo de deduplicação precisou ser feito na nova base.

```{r, dedup-newbase}
df_dupli <- df_games_3 |> 
  janitor::get_dupes(title)
```

Porém, ao contrário da base anterior, neste caso todos os jogos "duplicados" se tratavam de jogos diferentes que possuíam o mesmo nome, portanto nenhum deles foi removido.

##### Adicionando coluna de tags através de outra base (também da base 3)

```{r, add-tags}
library(jsonlite)
out <- lapply(readLines(here::here("data-raw/steam-data/db-3/games_metadata.json")), fromJSON)

## Unindo o terceiro elemento da lista
for(i in 1:length(out)){
  purrr::pluck(out, i, 3)<-paste0(purrr::pluck(out, i, 3), collapse = ",")
}

## Transformando em um dataframe para unir à outra base
df_metadata <- do.call(rbind.data.frame, out)

## Adicionando coluna de tags do df_metadata, e adicionando colunas de categoria, genero e tags extra do df anterior
df_games_3_complete <- dplyr::left_join(df_games_3, df_metadata, by = "app_id") |> 
  dplyr::select(-description)
```


##### Removendo não jogos

```{r, tagsNotGames}
## Categorias consideradas não jogos
notGames <- c("Utilities", "Design & Illustration", "Animation & Modeling", "Game Development", "Photo Editing", "Audio Production", "Video Production", "Accounting", "Movie", "Documentary", "Episodic", "Short", "Tutorial", "360 Video")

## Filtrando categorias consideradas não jogos
df_games_selTags <- func_filter_not_games(df_games_3_complete, notGames, mode = 2)
## mode = 2, comparação com tags

# data.table::fwrite(df_games_selTags, here::here("data-raw/created-tables/db-games-3.csv"))
```
